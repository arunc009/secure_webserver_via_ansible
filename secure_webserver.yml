- name: Create AWS instance
  hosts: 127.0.0.1
  connection: local
  gather_facts: False
  remote_user: ubuntu

  vars:

    region: us-east-1
    instance_type: t2.nano
    ami: ami-759bc50a  # Ubuntu 16.04 LTS ami-759bc50a
    project_name: testing
    env: staging
    app_code_user: "ubuntu" # remote user
    hoststring: "ansible_ssh_user=ubuntu ansible_ssh_private_key_file=./aws-private.pem"
    hostpath: "hosts"

  tasks:

    - name: Create security group
      ec2_group:
        name: "{{ project_name }}_security_group"
        description: "{{ project_name }} security group"
        region: "{{ region }}"
        rules:
          - proto: tcp  # ssh
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # https
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: test_firewall

    - name: Create an EC2 key
      ec2_key:
        name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
      register: ec2_key

    - name: Save private key
      copy: content="{{ ec2_key.key.private_key }}" dest="./aws-private.pem" mode=0600
      when: ec2_key.changed

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
        group_id: "{{ test_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        user_data: |
          #!/bin/bash
          apt update && apt install python
        wait: yes
        instance_tags:
            env: "{{ env }}"
        count_tag: env
        exact_count: 1
        vpc_subnet_id: subnet-b10d7cf8
        assign_public_ip: yes
      register: ec2

    #- debug: var=item.public_ip
    #  with_items: "{{ ec2.tagged_instances }}"

    - name: Add the newly created EC2 instance(s) to host group
      lineinfile: dest={{ hostpath }}
        regexp={{ item.public_ip }} 
        insertafter="^\[webserver\]" 
        line="{{ item.public_ip }} {{hoststring}}"
        state=present
      with_items: "{{ ec2.tagged_instances }}"

    - wait_for: path={{ hostpath }} search_regex={{hoststring}}

    - name: modify virtualhost file
      lineinfile: dest=./files/google.com
        regexp="server_name" 
        insertafter="server_name" 
        line="    server_name {{ item.public_ip }} {{ item.public_dns_name }} www.{{ item.public_dns_name }};"
        state=present
      with_items: "{{ ec2.tagged_instances }}"

    - name: Wait for SSH to come up
      local_action: wait_for 
                    host={{ item.public_ip }} 
                    port=22 
                    state=started
      with_items: "{{ ec2.tagged_instances }}"

- name: Create SSL certificates
  hosts: webserver
  become: yes
  become_method: sudo
  gather_facts: true
 
  tasks:
 
    - name: Update repository cache and install Nginx Package.
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - curl
       - nginx
        - openssl
        - python-openssl
     
    - name: Generate an OpenSSL private key
      openssl_privatekey:
        path: /etc/ssl/private/ansible.com.pem

    - name: Create directory
      file:
        path: /etc/ssl/csr
        state: directory
        mode: 0755
     
    - name: Generate an OpenSSL Certificate Signing Request
      openssl_csr:
        path: /etc/ssl/csr/www.ansible.com.csr
        privatekey_path: /etc/ssl/private/ansible.com.pem
        commonName: www.ansible.com
     
    - name: Generate a self signed certificate
      openssl_certificate:
        path: /etc/ssl/certs/nginx-selfsigned.crt
        privatekey_path: /etc/ssl/private/ansible.com.pem
        csr_path: /etc/ssl/csr/www.ansible.com.csr
        provider: selfsigned
     

- name: Install nginx
  hosts: webserver
  become: yes
  become_method: sudo
  gather_facts: true
 
  tasks:
   
    - name: Update repository cache and install Nginx Package.
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - nginx

    - name: Allow Nginx Full
      ufw:
        rule: allow
        name: Nginx Full
        state: enabled
     
    - name: Allow Nginx Full
      ufw:
        rule: allow
        name: OpenSSH
        state: enabled
     
    - name: Start nginx
      service:
        name: nginx
        state: started

    - wait_for:
      port: 80 

- name: Setup nginx with SSL
  hosts: webserver
  become: yes
  become_method: sudo
  gather_facts: true
 
  tasks:
   
    - copy:
        src: ./files/self-signed.conf
        dest: /etc/nginx/snippets/self-signed.conf
        owner: root
        group: root
        mode: 0644
         
    - copy:
        src: ./files/ssl-params.conf
        dest: /etc/nginx/snippets/ssl-params.conf
        owner: root
        group: root
        mode: 0644
         
    - copy:
        src: ./files/google.com
        dest: /etc/nginx/sites-enabled/google.com
        owner: root
        group: root
        mode: 0644

    - name: Adjust nginx setting before restarting
      lineinfile: dest=/etc/nginx/nginx.conf
        regexp="# server_names_hash_bucket_size;" 
        insertafter="server_names_hash_bucket_size" 
        line="        server_names_hash_bucket_size 512;"
        state=present
         
    - name: Restart nginx
      service:
        name: nginx
        state: restarted
         
    - wait_for:
        port: 443


